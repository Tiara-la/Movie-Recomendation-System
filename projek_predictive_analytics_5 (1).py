# -*- coding: utf-8 -*-
"""Projek_Predictive_Analytics_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckgRbbLDK7XgVgOk-tKMz959slPDmlAQ

Nama : Tiara Lailatul Nikmah  
Username : Tiara Laila  
Email : tiaralaila21@gmail.com  
Asal kota : Juwana, Pati

## **Mengimport library python yang dibutuhkan**
"""

# Commented out IPython magic to ensure Python compatibility.
# import library
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

"""## **Mempersiapkan Dataset**"""

# load the dataset
car = pd.read_csv('Cars24.csv')
car

"""## **Menghapus kolom yang tidak dipakai**"""

# hapus kolom unnamed karena tidak dipakai
car.drop(['Unnamed: 0'], axis=1, inplace=True)

"""## **Melihat info pada dataset**"""

# melihat data 5 teratas
car.head()

# melihat info dataset
car.info()

# melihat deskripsi dataset
car.describe()

"""## **Mengganti nama kolom agar lebih mudah dipakai**"""

# ganti nama kolom
car = car.rename(columns={"Car Brand": "Car_Brand", "Model Year": "Model_Year", "Driven (Kms)": "Driven", "EMI (monthly)": "EMI"})

# melihat nama kolom yang telah diubah
car.head()

"""## **Missing Value**"""

# cek ada berapa missing value pada kolom
Price = (car.Price == 0).sum()
Model_Year = (car.Model_Year == 0).sum()
Driven = (car.Driven == 0).sum()
Ownership = (car.Ownership == 0).sum()
EMI = (car.EMI == 0).sum()

print("Nilai 0 di kolom Price ada: ", Price)
print("Nilai 0 di kolom  Model_Year ada: ", Model_Year)
print("Nilai 0 di kolom Driven ada: ", Driven)
print("Nilai 0 di kolom Ownership ada: ", Ownership)
print("Nilai 0 di kolom EMI ada: ", EMI)

"""# **Visualisasikan data Diamonds dengan boxplot untuk mendeteksi outliers**

**Boxplot fitur Year**
"""

# 1. Year
sns.boxplot(x=car['Model_Year'])

"""**Boxpolt fitur Price**"""

# 2. Price
sns.boxplot(x=car['Price'])

"""**Boxpolt fitur Driven**"""

# 3. Driven
sns.boxplot(x=car['Driven'])

"""**Boxpolt fitur Ownership**"""

# 4. OwnerShip
sns.boxplot(x=car['Ownership'])

"""**Boxpolt fitur EMI**"""

# 4. EMI
sns.boxplot(x=car['EMI'])

"""## **Mengatasi Outliner**"""

# membuat batas bawah dan batas atas
Q1 = car.quantile(0.25)
Q3 = car.quantile(0.75)
IQR=Q3-Q1
car=car[~((car<(Q1-1.5*IQR))|(car>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
car.shape

"""# **Proses analisis data dengan teknik Univariate EDA**

## **Membagi fitur dataset**
"""

# bagi fitur pada dataset menjadi dua bagian
numerical_features = ['Model_Year', 'Price', 'Driven', 'Ownership', 'EMI']
categorical_features = ['Car_Brand', 'Model', 'Location', 'Fuel', 'Gear']

"""## **Categorical Features**
**Analisis terhadap fitur kategori**

**Analisis fitur Car_Brand**
"""

# Fitur Car_Brand
feature = categorical_features[0]
count = car[feature].value_counts()
percent = 100*car[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Analisis fitur Model**"""

# Fitur Model
feature = categorical_features[1]
count = car[feature].value_counts()
percent = 100*car[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Analisis fitur Location**"""

# Fitur Location
feature = categorical_features[2]
count = car[feature].value_counts()
percent = 100*car[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Analisis fitur Fuel**"""

# Fitur Fuel
feature = categorical_features[3]
count = car[feature].value_counts()
percent = 100*car[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""**Analisis fitur Gear**"""

# Fitur Gear
feature = categorical_features[4]
count = car[feature].value_counts()
percent = 100*car[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""## **Numerical Features**

**Histogram Fitur Numerik**
"""

# histogram masing-masing fitur numerik
car.hist(bins=50, figsize=(20,15))
plt.show()

"""# **Exploratory Data Analysis - Multivariate Analysis**

## **Categorical Features**
**Analisis data pada fitur kategori**

**Analisis Hubungan Fitur Kategori dengan Harga**
"""

# mengecek rata-rata harga terhadap masing-masing fitur untuk mengetahui pengaruh fitur kategori terhadap harga
cat_features = car.select_dtypes(include='object').columns.to_list()
 
for col in cat_features:
  sns.catplot(x=col, y="Price", kind="bar", dodge=False, height = 4, aspect = 3,  data=car, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

"""## **Numerical Features**

**Analisis Hubungan Fitur Numerik dengan Harga**
"""

# mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(car, diag_kind = 'kde')

"""## **Mengevaluasi skor korelasi**"""

# mengevaluasi skor korelasinya, gunakan fungsi corr()

plt.figure(figsize=(10, 8))
correlation_matrix = car.corr().round(2)

# annot = True untuk mencetak nilai di dalam kotak
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""## **Hapus Kolom yang tidak berpengaruh**"""

# hapus kolom ownership karena tidak berpengaruh dengan harga
car.drop(['Ownership'], axis=1, inplace=True)

# mengecek dataset setelah menghapus kolom ownership
car.head()

"""# **Data Preparation**

## **Encoding Fitur Kategori**
"""

# lakukan proses encoding ini dengan fitur get_dummies 'car_brand', 'model', 'location', 'fuel', 'gear'
# untuk mengganti nilai data kategorik menjadi data numerik
from sklearn.preprocessing import  OneHotEncoder
car = pd.concat([car, pd.get_dummies(car['Car_Brand'], prefix='Car_Brand', drop_first=True)],axis=1)
car = pd.concat([car, pd.get_dummies(car['Model'], prefix='Model', drop_first=True)],axis=1)
car = pd.concat([car, pd.get_dummies(car['Location'], prefix='Location', drop_first=True)],axis=1)
car = pd.concat([car, pd.get_dummies(car['Fuel'], prefix='Fuel', drop_first=True)],axis=1)
car = pd.concat([car, pd.get_dummies(car['Gear'], prefix='Gear', drop_first=True)],axis=1)
car.drop(['Car_Brand', 'Model', 'Location', 'Fuel', 'Gear'], axis=1, inplace=True)
car.head(100)

"""## **Train-Test-Split**

**Membagi Dataset**
"""

# menggunakan proporsi pembagian sebesar 90:10 dengan fungsi train_test_split dari sklearn
from sklearn.model_selection import train_test_split
 
X = car.drop(["Price"],axis =1)
y = car["Price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

"""**Cek Jumlah Sampel**"""

# mengecek jumlah sampel pada masing-masing bagian
print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## **Standarisasi**

**Fitur standarisasi pada data latih**
"""

# import library
from sklearn.preprocessing import StandardScaler

# standarisasi
numerical_features = ['Model_Year', 'Driven', 'EMI']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""**Nilai Mean dan Standar Deviasi**"""

# mengecek nilai mean dan standar deviasi pada setelah proses standarisasi
X_train[numerical_features].describe().round(4)

"""# **Model Development**"""

# Siapkan daraframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""## **K-Nearest Neighbor**"""

# Import library
from sklearn.neighbors import KNeighborsRegressor

# buat model prediksi
knn = KNeighborsRegressor(n_neighbors=4)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_train)

"""## **Random Forest**"""

# Import library yang dibutuhkan
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
 
# buat model prediksi
RF = RandomForestRegressor(n_estimators=8, max_depth=30, random_state=52, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)
models.loc['train_rmse','RandomForest'] = np.sqrt(mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train))

"""## **Boosting Algorithm**"""

# import library
from sklearn.ensemble import AdaBoostRegressor

# buat model prediksi
boosting = AdaBoostRegressor(n_estimators=5, learning_rate=0.05, random_state=90)                             
boosting.fit(X_train, y_train)

models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)
models.loc['train_rmse','Boosting'] = np.sqrt(mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train))

"""# **Evaluasi Model**

**Proses Scaling**
"""

# Skala fitur numerik kami sehingga memiliki rata-rata nol dan varians satu
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""**Metrik MSE (Mean Squared Error)**"""

# evaluasi ketiga model kita dengan metrik MSE
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
mse

"""**Metrik RMSE (Root Mean Squared Error)**"""

# evaluasi ketiga model kita dengan metrik RMSE
rmse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    rmse.loc[name, 'train'] = np.sqrt(mean_squared_error(y_true=y_train, y_pred=model.predict(X_train)))/1e3 
    rmse.loc[name, 'test'] = np.sqrt(mean_squared_error(y_true=y_test, y_pred=model.predict(X_test)))/1e3
 
rmse

"""**Plot Metrik MSE**"""

# plot metrik tersebut dengan bar chart
fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""**Plot Metrik RSME**"""

# plot metrik tersebut dengan bar chart
fig, ax = plt.subplots()
rmse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""**Menguji Model Terbaik**



"""

# pilih sebagai model terbaik untuk melakukan prediksi harga diamonds
 # menguji
prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)